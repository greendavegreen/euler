package main

import (
	"github.com/greendavegreen/factor"
	"fmt"
)

/*

Motivation find a, b such that

  n^2 an + b, where |a| < 1000, |b|<=1000

  where for n values 0 through x are all prime numbers

Technique:
  brute force calculate how many primes f(n) generated by a,b for each a,b

*/

func f(a int, b int, n int) int {
	return n*n + a*n + b
}

func maxPrimeSequence(ft *factor.FactorTable, a int, b int) (int, error) {
	n := 0
	for ; ; n++ {
		if isP, _ := ft.IsPrime(f(a, b, n)); !isP {
			break
		}
	}
	return n, nil
}

func main() {
	ul := 1100000
	ft := factor.NewFactorTable(ul)

	max := 0
	maxProd := 0

	bList := ft.PrimesLessThan(1001)
	for a := -999; a < 1; a++ {
		for _, b :=range bList {
			if length, _ := maxPrimeSequence(ft, a, b); length > max {
				max = length
				maxProd = a * b
			}
		}
	}

	fmt.Printf("maxProd A*B=%v\n", maxProd)
}
